name: Check Latest Release URLs

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  check-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install @octokit/rest

      - name: Check README for outdated release URLs
        run: |
          node --input-type=module <<'EOF'
          import { readFileSync } from 'fs';
          import { Octokit } from '@octokit/rest';

          const octokit = new Octokit(); // Unauthenticated for public API calls

          const checkLatestRelease = async () => {
            const readme = readFileSync('README.md', 'utf-8');
            const regex = /- ### ÓÄÅ(.*?)ÓÄÅÓÄÅ(https:\/\/github\.com\/.*?)ÓÄÅ.*?ÓÄÅ.*?ÓÄÅÓÄÅ(https:\/\/github\.com\/.*?\/releases\/.*?)ÓÄÅ/g;
            let match;
            let allCorrect = true;

            console.log('üîç Starting checks for outdated release URLs in README...');

            while ((match = regex.exec(readme)) !== null) {
              const pluginName = match[1];
              const repoUrl = match[2];
              const currentReleaseUrl = match[3];
              const repoPath = repoUrl.replace('https://github.com/', '');

              console.log(`\nüõ† Checking plugin: ${pluginName}`);
              console.log(`   ‚û§ Repository URL: ${repoUrl}`);
              console.log(`   ‚û§ Current Release URL: ${currentReleaseUrl}`);

              try {
                const { data: latestRelease } = await octokit.repos.getLatestRelease({
                  owner: repoPath.split('/')[0],
                  repo: repoPath.split('/')[1],
                });

                const latestReleaseUrl = latestRelease.html_url;

                console.log(`   ‚û§ Latest Release URL: ${latestReleaseUrl}`);
                if (currentReleaseUrl === latestReleaseUrl) {
                  console.log(`‚úÖ ${pluginName} is up-to-date.`);
                } else {
                  console.log(`‚ùå ${pluginName} is outdated. Update the URL to ${latestReleaseUrl}`);
                  console.log(`::warning file=README.md::${pluginName} is outdated. Update the URL to ${latestReleaseUrl}`);
                  allCorrect = false;
                }
              } catch (error) {
                console.error(`‚ö†Ô∏è Failed to fetch latest release for ${pluginName}. Error: ${error.message}`);
                console.log(`::error file=README.md::Failed to fetch latest release for ${pluginName}: ${error.message}`);
                allCorrect = false;
              }
            }

            console.log(
              `\n${allCorrect ? '‚úÖ All plugins are up-to-date.' : '‚ùå Some plugins are outdated.'}`
            );

            if (!allCorrect) {
              process.exit(1);
            }
          };

          checkLatestRelease();
          EOF
